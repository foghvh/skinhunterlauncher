/// SkinHunterLauncher Start of App.xaml ///
﻿<Application x:Class="SkinHunterLauncher.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SkinHunterLauncher">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/LauncherSpecificStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
/// SkinHunterLauncher End of App.xaml ///

/// SkinHunterLauncher Start of App.xaml.cs ///
﻿using Microsoft.Extensions.DependencyInjection;
using SkinHunterLauncher.ViewModels;
using System;
using System.Windows;
using SkinHunterLauncher.Services;

namespace SkinHunterLauncher
{
    public partial class App : Application
    {
        public static IServiceProvider? ServiceProvider { get; private set; }

        protected override async void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            var serviceCollection = new ServiceCollection();
            ConfigureServices(serviceCollection);
            ServiceProvider = serviceCollection.BuildServiceProvider();

            var supabaseService = ServiceProvider.GetRequiredService<SupabaseService>();
            await supabaseService.InitializeAsync();

            // Intentar cargar usuario recordado al inicio
            var authService = ServiceProvider.GetRequiredService<AuthService>();
            var sessionService = ServiceProvider.GetRequiredService<CurrentUserSessionService>();
            var (token, username) = authService.GetRememberedUser();
            if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(username))
            {
                var principal = authService.ValidateToken(token);
                if (principal?.Identity?.IsAuthenticated == true)
                {
                    // Si el token es válido, obtener los datos completos del usuario
                    // Podríamos necesitar un método en SupabaseService para GetUserById si el claim solo tiene el ID
                    Models.User? rememberedUser = await supabaseService.GetUserByLogin(username);
                    if (rememberedUser != null)
                    {
                        sessionService.SetCurrentUser(rememberedUser, token);
                    }
                }
                else
                {
                    authService.ClearRememberedUser(); // Token recordado inválido
                }
            }


            var launcherWindow = ServiceProvider.GetRequiredService<LauncherWindow>();
            launcherWindow.Show();
        }

        private void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<SupabaseService>();
            services.AddSingleton<AuthService>();
            services.AddSingleton<CurrentUserSessionService>(); // AÑADIDO

            services.AddSingleton<LauncherMainViewModel>();
            services.AddTransient<WelcomeViewModel>();
            services.AddTransient<SignInViewModel>();
            services.AddTransient<LoadingViewModel>();
            services.AddTransient<MainLauncherViewModel>();

            services.AddSingleton<LauncherWindow>();
        }
    }
}
/// SkinHunterLauncher End of App.xaml.cs ///

/// SkinHunterLauncher Start of LauncherWindow.xaml ///
<Window x:Class="SkinHunterLauncher.LauncherWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
        xmlns:v="clr-namespace:SkinHunterLauncher.Views"
        mc:Ignorable="d"
        Title="{Binding Title, FallbackValue='Skin-Hunter'}"
	    Height="600" Width="420" MinHeight="500" MinWidth="380"
	    Style="{StaticResource LauncherWindowStyle}"
	    WindowStartupLocation="CenterScreen">

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="35" ResizeBorderThickness="8" GlassFrameThickness="0" CornerRadius="0" UseAeroCaptionButtons="False"/>
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <!-- Los DataTemplates ya deberían estar correctos si los prefijos vm y v están bien definidos arriba -->
            <DataTemplate DataType="{x:Type vm:WelcomeViewModel}">
                <v:WelcomeView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:SignInViewModel}">
                <v:SignInView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:LoadingViewModel}">
                <v:LoadingView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type vm:MainLauncherViewModel}">
                <v:MainLauncherView/>
            </DataTemplate>
        </ResourceDictionary>
    </Window.Resources>

    <Border Background="{StaticResource LauncherContentBackgroundBrush}" CornerRadius="6" BorderThickness="1" BorderBrush="{StaticResource LauncherInputBorderBrush}">
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" Height="35" Background="Transparent" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
                <DockPanel LastChildFill="False">
                    <StackPanel DockPanel.Dock="Left" Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,0,0">
                        <TextBlock Text="{Binding Title, FallbackValue='Skin-Hunter'}" Style="{StaticResource LauncherTitleBarTextBlockStyle}"/>
                    </StackPanel>

                    <StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right">
                        <Button Style="{StaticResource LauncherTitleBarButtonStyle}" Command="{Binding MinimizeApplicationCommand}" ToolTip="Minimize">
                            <Path Data="M0,5 H10 V6 H0 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" Width="10" Height="10" Stretch="None"/>
                        </Button>
                        <Button Style="{StaticResource LauncherCloseButtonStyle}" Command="{Binding CloseApplicationCommand}" ToolTip="Close">
                            <Path Data="M0,0 L10,10 M10,0 L0,10" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" StrokeThickness="1.2" Width="9" Height="9" Stretch="Uniform"/>
                        </Button>
                    </StackPanel>
                </DockPanel>
            </Border>

            <ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}" HorizontalAlignment="Stretch" VerticalContentAlignment="Stretch"/>

            <Grid Grid.Row="0" Grid.RowSpan="2" Background="#CC000000"
                  Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                  d:IsHidden="True">
                <ProgressBar Style="{StaticResource LauncherLoadingSpinnerStyle}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
            </Grid>
        </Grid>
    </Border>
</Window>
/// SkinHunterLauncher End of LauncherWindow.xaml ///

/// SkinHunterLauncher Start of LauncherWindow.xaml.cs ///
﻿using SkinHunterLauncher.ViewModels;
using System.Windows;
using System.Windows.Input;
using System.ComponentModel;
using System.Windows.Media.Animation; // Para animaciones si se decide
using System; // Para EventArgs

namespace SkinHunterLauncher
{
    public partial class LauncherWindow : Window
    {
        public LauncherWindow(LauncherMainViewModel viewModel)
        {
            InitializeComponent();
            DataContext = viewModel;
            Loaded += LauncherWindow_Loaded;
            // SizeChanged += LauncherWindow_SizeChanged; // Considerar si el centrado solo se hace al cambiar de VM
        }

        private async void LauncherWindow_Loaded(object sender, RoutedEventArgs e)
        {
            if (DataContext is LauncherMainViewModel vm)
            {
                await vm.InitializeAsync();
                vm.PropertyChanged += ViewModel_PropertyChanged;
                if (vm.CurrentViewModel != null)
                {
                    ApplyWindowStateForViewModel(vm.CurrentViewModel, false); // Aplicar estado inicial sin animación/recentrado agresivo
                    this.Title = vm.CurrentViewModel.Title;
                }
            }
        }

        private void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(LauncherMainViewModel.CurrentViewModel) && sender is LauncherMainViewModel vm)
            {
                if (vm.CurrentViewModel != null)
                {
                    Dispatcher.Invoke(() => {
                        ApplyWindowStateForViewModel(vm.CurrentViewModel, true); // Aplicar con posible recentrado
                        this.Title = vm.CurrentViewModel.Title;
                    });
                }
            }
        }

        private void ApplyWindowStateForViewModel(LauncherBaseViewModel? viewModel, bool recenter)
        {
            double newWidth = this.Width;
            double newHeight = this.Height;
            ResizeMode newResizeMode = this.ResizeMode;

            if (viewModel is WelcomeViewModel || viewModel is SignInViewModel || viewModel is LoadingViewModel)
            {
                newWidth = 420;
                newHeight = 600;
                newResizeMode = ResizeMode.CanMinimize;
            }
            else if (viewModel is MainLauncherViewModel)
            {
                newWidth = 800;
                newHeight = 550;
                newResizeMode = ResizeMode.CanResizeWithGrip;
            }

            this.ResizeMode = newResizeMode; // Aplicar ResizeMode primero
            this.Width = newWidth;
            this.Height = newHeight;

            if (recenter)
            {
                CenterWindowOnScreen();
            }
        }

        private void CenterWindowOnScreen()
        {
            double screenWidth = SystemParameters.PrimaryScreenWidth;
            double screenHeight = SystemParameters.PrimaryScreenHeight;
            this.Left = (screenWidth / 2) - (this.Width / 2);
            this.Top = (screenHeight / 2) - (this.Height / 2);
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ButtonState == MouseButtonState.Pressed)
            {
                DragMove();
            }
        }
    }
}
/// SkinHunterLauncher End of LauncherWindow.xaml.cs ///

/// Views Start of LoadingView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.LoadingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:LoadingViewModel}"
             d:DesignHeight="450" d:DesignWidth="400" Background="Transparent">
    <Grid>
        <ProgressBar Style="{StaticResource LauncherLoadingSpinnerStyle}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Grid>
</UserControl>
/// Views End of LoadingView.xaml ///

/// Views Start of LoadingView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class LoadingView : UserControl
    {
        public LoadingView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of LoadingView.xaml.cs ///

/// Views Start of MainLauncherView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.MainLauncherView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             xmlns:m="clr-namespace:SkinHunterLauncher.Models"
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance Type=vm:MainLauncherViewModel}"
             Background="Transparent">
    <Grid Margin="20,15,20,20">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="2*" MinWidth="280"/>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="3*" MinWidth="320"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" Margin="0,0,15,0">
            <Grid.RowDefinitions>
                <RowDefinition Height="Auto"/>
                <RowDefinition Height="*"/>
            </Grid.RowDefinitions>

            <StackPanel Grid.Row="0" Orientation="Horizontal" Margin="0,0,0,20">
                <Border Width="40" Height="40" CornerRadius="20" Background="{StaticResource LauncherButtonBackgroundBrush}" Margin="0,0,10,0">
                    <TextBlock Text="{Binding UserAvatarFallback}" FontSize="26" FontWeight="Normal"
                               HorizontalAlignment="Center" VerticalAlignment="Center"
                               Foreground="{StaticResource LauncherAccentBrush}"/>
                </Border>
                <TextBlock Text="{Binding UserLogin}" FontSize="28" FontWeight="Normal"
                           VerticalAlignment="Center" Foreground="{StaticResource LauncherForegroundBrush}"/>
            </StackPanel>

            <ScrollViewer Grid.Row="1" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Padding="0,0,5,0">
                <ItemsControl ItemsSource="{Binding UpdateLogs}">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="{x:Type m:SupabaseUpdateLogEntry}">
                            <Border Style="{StaticResource UpdateLogSectionStyle}">
                                <StackPanel>
                                    <TextBlock Text="{Binding Title}" Style="{StaticResource UpdateLogTitleStyle}"/>
                                    <ItemsControl ItemsSource="{Binding Changes}">
                                        <ItemsControl.ItemTemplate>
                                            <DataTemplate>
                                                <DockPanel LastChildFill="True">
                                                    <TextBlock Text="• " Foreground="{StaticResource LauncherSubtleTextBrush}" VerticalAlignment="Top" FontSize="22"/>
                                                    <TextBlock Text="{Binding}" Style="{StaticResource UpdateLogItemStyle}" TextWrapping="Wrap"/>
                                                </DockPanel>
                                            </DataTemplate>
                                        </ItemsControl.ItemTemplate>
                                    </ItemsControl>
                                </StackPanel>
                            </Border>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ScrollViewer>
        </Grid>

        <Separator Grid.Column="1" Style="{StaticResource {x:Static ToolBar.SeparatorStyleKey}}" Background="{StaticResource LauncherInputBorderBrush}" Margin="5,0"/>

        <Border Grid.Column="2" Background="{StaticResource LauncherContentBackgroundBrush}" CornerRadius="6" Padding="20" Margin="15,0,0,0">
            <StackPanel>
                <Border Height="180" CornerRadius="4" Margin="0,0,0,20" Background="Transparent" ClipToBounds="True">
                    <Image Source="pack://application:,,,/Assets/launcher_banner.png" Stretch="Uniform" RenderOptions.BitmapScalingMode="Fant"/>
                </Border>

                <Grid Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Patch" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="24" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding PatchVersion}" Foreground="{StaticResource LauncherForegroundBrush}" FontSize="24" FontWeight="Normal" HorizontalAlignment="Right" ToolTip="{Binding PatchVersion}"/>
                </Grid>
                <Grid Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Status" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="24" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding VersionStatus}" Foreground="{Binding VersionStatus, Converter={StaticResource VersionStatusToColorConverter}}" FontSize="24" FontWeight="Normal" HorizontalAlignment="Right"/>
                </Grid>
                <Grid Margin="0,0,0,30">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="License" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="24" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding LicenseType}" Foreground="{StaticResource LauncherAccentBrush}" FontSize="24" FontWeight="Normal" HorizontalAlignment="Right"/>
                </Grid>

                <Button Content="▶ LAUNCH" Style="{StaticResource LauncherPrimaryButtonStyle}"
                        Command="{Binding PlayCommand}" HorizontalAlignment="Stretch" Padding="0" Height="50" FontSize="30"/>
            </StackPanel>
        </Border>
    </Grid>
</UserControl>
/// Views End of MainLauncherView.xaml ///

/// Views Start of MainLauncherView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class MainLauncherView : UserControl
    {
        public MainLauncherView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of MainLauncherView.xaml.cs ///

/// Views Start of SignInView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.SignInView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:SignInViewModel}"
             d:DesignHeight="450" d:DesignWidth="400" Background="Transparent">
    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="320">
        <TextBlock Text="Sign in" FontSize="46" FontWeight="Bold" 
                   Foreground="{StaticResource LauncherForegroundBrush}" 
                   HorizontalAlignment="Left" Margin="0,0,0,5"/>
        <TextBlock Text="to continue to Skin-Hunter" FontSize="30" 
                   Foreground="{StaticResource LauncherSubtleTextBrush}" 
                   HorizontalAlignment="Left" Margin="0,0,0,25"/>

        <TextBlock Text="Login" FontSize="30" Foreground="{StaticResource LauncherSubtleTextBrush}" Margin="0,0,0,8"/>
        <TextBox Style="{StaticResource LauncherTextBoxWithIconStyle}"
                 Text="{Binding Username, UpdateSourceTrigger=PropertyChanged}" 
                 ToolTip="Enter your username"
                 Tag="M12,4A4,4 0 0,1 16,8A4,4 0 0,1 12,12A4,4 0 0,1 8,8A4,4 0 0,1 12,4M12,14C16.42,14 20,15.79 20,18V20H4V18C4,15.79 7.58,14 12,14Z"
                 Margin="0,0,0,15"/>

        <TextBlock Text="Password" FontSize="30" Foreground="{StaticResource LauncherSubtleTextBrush}" Margin="0,0,0,8"/>
        <PasswordBox x:Name="PasswordInput" Style="{StaticResource {x:Type PasswordBox}}"
                     ToolTip="Enter your password"
                     Tag="M12,17A2,2 0 0,0 14,15C14,13.89 13.1,13 12,13A2,2 0 0,0 10,15A2,2 0 0,0 12,17M18,8A2,2 0 0,1 20,10V20A2,2 0 0,1 18,22H6A2,2 0 0,1 4,20V10C4,8.89 4.9,8 6,8H7V6A5,5 0 0,1 12,1A5,5 0 0,1 17,6V8H18M12,3A3,3 0 0,0 9,6V8H15V6A3,3 0 0,0 12,3Z"
                     Margin="0,0,0,20"
                     PasswordChanged="PasswordBox_PasswordChanged"/>

        <CheckBox Content="Remember me" IsChecked="{Binding RememberMe}" 
                  Style="{StaticResource LauncherCheckBoxStyle}" Margin="0,0,0,30"/>

        <Button Content="LOGIN" Style="{StaticResource LauncherPrimaryButtonStyle}" 
                Command="{Binding LoginCommand}" Margin="0,0,0,15"/>

        <Button Content="Don't have an account? Register" Style="{StaticResource LauncherLinkButtonStyle}"
                Command="{Binding RegisterCommand}"/>
    </StackPanel>
</UserControl>
/// Views End of SignInView.xaml ///

/// Views Start of SignInView.xaml.cs ///
﻿using SkinHunterLauncher.ViewModels;
using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class SignInView : UserControl
    {
        public SignInView()
        {
            InitializeComponent();
        }

        private void PasswordBox_PasswordChanged(object sender, System.Windows.RoutedEventArgs e)
        {
            if (DataContext is SignInViewModel viewModel && sender is PasswordBox passwordBox)
            {
                viewModel.Password = passwordBox.Password;
            }
        }
    }
}
/// Views End of SignInView.xaml.cs ///

/// Views Start of WelcomeView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.WelcomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:WelcomeViewModel}"
             d:DesignHeight="450" d:DesignWidth="400"
             Background="Transparent">
    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="300">
        <TextBlock Text="Welcome!" FontSize="46" FontWeight="Bold" Foreground="{StaticResource LauncherForegroundBrush}" HorizontalAlignment="Center" Margin="0,0,0,10"/>
        <TextBlock Text="Choose what you want to do" FontSize="30" Foreground="{StaticResource LauncherSubtleTextBrush}" HorizontalAlignment="Center" Margin="0,0,0,30"/>

        <Button Content="SIGN IN" Style="{StaticResource LauncherPrimaryButtonStyle}" 
                Command="{Binding SignInCommand}" Margin="0,0,0,15"/>
        <Button Content="BUY" Style="{StaticResource LauncherSecondaryButtonStyle}"
                Command="{Binding BuyCommand}"/>
    </StackPanel>
</UserControl>
/// Views End of WelcomeView.xaml ///

/// Views Start of WelcomeView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class WelcomeView : UserControl
    {
        public WelcomeView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of WelcomeView.xaml.cs ///

/// ViewModels Start of LauncherBaseViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using System.Threading.Tasks;

namespace SkinHunterLauncher.ViewModels
{
    public abstract partial class LauncherBaseViewModel : ObservableObject
    {
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsNotLoading))]
        private bool _isLoading;

        public bool IsNotLoading => !IsLoading;

        [ObservableProperty]
        private string _title = "Skin-Hunter"; // REBRANDED

        public virtual Task InitializeAsync(object? parameter = null)
        {
            return Task.CompletedTask;
        }
    }
}
/// ViewModels End of LauncherBaseViewModel.cs ///

/// ViewModels Start of LauncherMainViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Threading.Tasks;
using System.Windows;

namespace SkinHunterLauncher.ViewModels
{
    public partial class LauncherMainViewModel : LauncherBaseViewModel
    {
        private readonly IServiceProvider _serviceProvider;

        [ObservableProperty]
        private LauncherBaseViewModel? _currentViewModel;

        public LauncherMainViewModel(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            Title = "Skin-Hunter"; // REBRANDED - Main window title
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            if (CurrentViewModel == null) // Solo navega si no hay ya una vista actual
            {
                await NavigateTo<WelcomeViewModel>();
            }
        }

        public async Task NavigateTo<TViewModel>(object? parameter = null) where TViewModel : LauncherBaseViewModel
        {
            if (CurrentViewModel is IDisposable disposableOld)
            {
                disposableOld.Dispose();
            }

            var newViewModel = _serviceProvider.GetService(typeof(TViewModel)) as LauncherBaseViewModel;
            if (newViewModel != null)
            {
                IsLoading = true;
                CurrentViewModel = newViewModel;
                if (Application.Current.MainWindow != null) // Actualiza el título de la ventana real
                {
                    Application.Current.MainWindow.Title = CurrentViewModel.Title;
                }
                await CurrentViewModel.InitializeAsync(parameter);
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void CloseApplication()
        {
            Application.Current.Shutdown();
        }

        [RelayCommand]
        private void MinimizeApplication()
        {
            if (Application.Current.MainWindow != null)
            {
                Application.Current.MainWindow.WindowState = WindowState.Minimized;
            }
        }
    }
}
/// ViewModels End of LauncherMainViewModel.cs ///

/// ViewModels Start of LoadingViewModel.cs ///
﻿using System.Threading.Tasks;
using System;
using Microsoft.Extensions.DependencyInjection; // Necesario para GetService

namespace SkinHunterLauncher.ViewModels
{
    public partial class LoadingViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;
        public LoadingViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Loading"; // REBRANDED
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            await Task.Delay(1500); // Reducido para pruebas más rápidas
            await _mainViewModel.NavigateTo<MainLauncherViewModel>();
        }
    }
}
/// ViewModels End of LoadingViewModel.cs ///

/// ViewModels Start of MainLauncherViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterLauncher.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using System.IO;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection;
using SkinHunterLauncher.Services;
using System.Net.Http;
using System.Text.Json;
using System.Linq;
using System.Collections.Generic; // Para List<SupabaseUpdateLogEntry>

namespace SkinHunterLauncher.ViewModels
{
    public partial class MainLauncherViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;
        private readonly CurrentUserSessionService _sessionService;
        private readonly SupabaseService _supabaseService;
        private readonly HttpClient _httpClient;

        [ObservableProperty]
        private string? _userLogin;

        [ObservableProperty]
        private string? _userAvatarFallback;

        [ObservableProperty]
        private string _patchVersion = "Unknown";

        [ObservableProperty]
        private string _versionStatus = "Checking...";

        [ObservableProperty]
        private string _licenseType = "N/A";

        public ObservableCollection<SupabaseUpdateLogEntry> UpdateLogs { get; } = new();

        public MainLauncherViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            _sessionService = serviceProvider.GetRequiredService<CurrentUserSessionService>();
            _supabaseService = serviceProvider.GetRequiredService<SupabaseService>();
            _httpClient = new HttpClient();

            Title = "Skin-Hunter - Home";
        }

        private void LoadUserDataAndLicense()
        {
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                UserLogin = _sessionService.CurrentUser.Login;
                if (!string.IsNullOrEmpty(UserLogin))
                {
                    UserAvatarFallback = UserLogin.Length > 0 ? UserLogin[0].ToString().ToUpper() : "U";
                }
                else
                {
                    UserLogin = "User";
                    UserAvatarFallback = "U";
                }
                LicenseType = _sessionService.CurrentUser.IsBuyer ? "Buyer" : "N/A";
            }
            else
            {
                UserLogin = "Guest";
                UserAvatarFallback = "G";
                LicenseType = "N/A";
            }
        }

        private async Task FetchAndUpdateLogs()
        {
            var logs = await _supabaseService.GetUpdateLogsAsync();
            UpdateLogs.Clear();
            if (logs != null)
            {
                // Ordenar por alguna propiedad si es necesario, por ejemplo, una fecha o versión si la añades.
                // Por ahora, los añade tal como vienen.
                foreach (var logEntry in logs)
                {
                    UpdateLogs.Add(logEntry);
                }
            }
            else
            {
                // Añadir un log por defecto si falla la carga
                UpdateLogs.Add(new SupabaseUpdateLogEntry { Title = "INFO", Changes = new List<string> { "Could not load update logs." } });
            }
        }

        private async Task CheckVersion()
        {
            VersionStatus = "Checking...";
            try
            {
                string cdragonVersionString = "";
                try
                {
                    var responseCdragon = await _httpClient.GetAsync("https://raw.communitydragon.org/latest/content-metadata.json");
                    responseCdragon.EnsureSuccessStatusCode();
                    string jsonCdragon = await responseCdragon.Content.ReadAsStringAsync();
                    using var docCdragon = JsonDocument.Parse(jsonCdragon);
                    if (docCdragon.RootElement.TryGetProperty("version", out JsonElement versionElement))
                    {
                        var fullCdragonVersion = versionElement.GetString();
                        var versionParts = fullCdragonVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            cdragonVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching CDRAGON version: {ex.Message}");
                    PatchVersion = "DB Error";
                    VersionStatus = "Error";
                    return;
                }

                if (string.IsNullOrEmpty(cdragonVersionString))
                {
                    PatchVersion = "N/A";
                    VersionStatus = "Unknown";
                    return;
                }

                PatchVersion = cdragonVersionString;

                string supabasePatchVersionString = "";
                try
                {
                    byte[]? fileBytes = await _supabaseService.DownloadFileBytesAsync("version", "patch.json");

                    if (fileBytes == null || fileBytes.Length == 0)
                    {
                        Debug.WriteLine($"Supabase patch.json not found or is empty.");
                        VersionStatus = "Local N/A";
                        return;
                    }
                    string jsonSupabase = System.Text.Encoding.UTF8.GetString(fileBytes);

                    using var docSupabase = JsonDocument.Parse(jsonSupabase);
                    if (docSupabase.RootElement.TryGetProperty("version", out JsonElement supabaseVersionElement))
                    {
                        var fullSupabaseVersion = supabaseVersionElement.GetString();
                        var versionParts = fullSupabaseVersion?.Split('.').Take(2);
                        if (versionParts != null)
                        {
                            supabasePatchVersionString = string.Join(".", versionParts);
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error fetching/parsing Supabase patch.json: {ex.Message}");
                    VersionStatus = "Local Error";
                    return;
                }

                if (string.IsNullOrEmpty(supabasePatchVersionString))
                {
                    VersionStatus = "Local N/A";
                    return;
                }

                if (cdragonVersionString.Equals(supabasePatchVersionString, StringComparison.OrdinalIgnoreCase))
                {
                    VersionStatus = "UPDATED";
                }
                else
                {
                    VersionStatus = "OUTDATED";
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error checking version: {ex.Message}");
                PatchVersion = "Error";
                VersionStatus = "Error";
            }
        }

        [RelayCommand]
        private void Play()
        {
            string mainAppExecutableName = "SkinHunterWPF.exe";
            string launcherDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string mainAppPath = Path.Combine(launcherDirectory, mainAppExecutableName);

            if (!File.Exists(mainAppPath))
            {
                Debug.WriteLine($"Primary path not found: {mainAppPath}. Attempting development path discovery...");
                try
                {
                    DirectoryInfo? currentDirInfo = new DirectoryInfo(launcherDirectory);
                    DirectoryInfo? binDir = currentDirInfo.Parent?.Parent;
                    DirectoryInfo? projectLauncherDir = binDir?.Parent;
                    DirectoryInfo? solutionDir = projectLauncherDir?.Parent;

                    if (solutionDir != null)
                    {
                        string skinHunterWPFProjectDirName = "SkinHunterWPF";
                        string targetFramework = currentDirInfo.Name;
                        string configuration = currentDirInfo.Parent?.Name ?? "Debug";

                        string devMainAppPath = Path.Combine(solutionDir.FullName, skinHunterWPFProjectDirName, "bin", configuration, targetFramework, mainAppExecutableName);
                        Debug.WriteLine($"Attempting development path: {devMainAppPath}");
                        if (File.Exists(devMainAppPath))
                        {
                            mainAppPath = devMainAppPath;
                        }
                        else
                        {
                            Debug.WriteLine($"Development path also not found: {devMainAppPath}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error during development path discovery: {ex.Message}");
                }
            }

            if (File.Exists(mainAppPath))
            {
                try
                {
                    ProcessStartInfo startInfo = new ProcessStartInfo(mainAppPath)
                    {
                        UseShellExecute = true
                    };
                    Process.Start(startInfo);

                    Application.Current.Shutdown();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to start SkinHunterWPF:\n{ex.Message}", "Launch Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show($"SkinHunterWPF.exe not found.\nSearched at: {mainAppPath}\n(And common development paths)\n\nPlease ensure SkinHunterWPF.exe is in the same directory as the launcher or that build output paths are correctly configured for development.",
                                "Application Not Found", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            LoadUserDataAndLicense();
            await FetchAndUpdateLogs();
            await CheckVersion();
        }
    }
}
/// ViewModels End of MainLauncherViewModel.cs ///

/// ViewModels Start of SignInViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection;
using System.Windows;
using SkinHunterLauncher.Services;

namespace SkinHunterLauncher.ViewModels
{
    public partial class SignInViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;
        private readonly AuthService _authService;
        private readonly CurrentUserSessionService _sessionService; // AÑADIDO

        [ObservableProperty]
        private string? _username;

        private string? _password;
        public string? Password
        {
            get => _password;
            set => SetProperty(ref _password, value);
        }

        [ObservableProperty]
        private bool _rememberMe;

        public SignInViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            _authService = serviceProvider.GetRequiredService<AuthService>();
            _sessionService = serviceProvider.GetRequiredService<CurrentUserSessionService>(); // AÑADIDO
            Title = "Skin-Hunter - Sign In";
            LoadRememberedUser();
        }

        private void LoadRememberedUser()
        {
            // Si el CurrentUser ya está en la sesión (cargado en App.xaml.cs), usarlo
            if (_sessionService.IsUserLoggedIn && _sessionService.CurrentUser != null)
            {
                Username = _sessionService.CurrentUser.Login;
                RememberMe = true;
                Debug.WriteLine($"User {_sessionService.CurrentUser.Login} pre-filled from current session.");
            }
            else // Si no, intentar cargar desde settings (como antes)
            {
                var (token, rememberedUsername) = _authService.GetRememberedUser();
                if (!string.IsNullOrEmpty(token) && !string.IsNullOrEmpty(rememberedUsername))
                {
                    Username = rememberedUsername;
                    RememberMe = true;
                    Debug.WriteLine($"Username {Username} pre-filled from remembered settings (token needs validation on login).");
                }
            }
        }

        [RelayCommand]
        private async Task Login()
        {
            if (string.IsNullOrWhiteSpace(Username) || string.IsNullOrWhiteSpace(Password))
            {
                MessageBox.Show("Please enter both username and password.", "Login Failed", MessageBoxButton.OK, MessageBoxImage.Warning);
                return;
            }

            IsLoading = true;

            var (success, token, userData, errorMessage) = await _authService.LoginAsync(Username, Password);

            if (success && token != null && userData != null)
            {
                _sessionService.SetCurrentUser(userData, token); // GUARDAR EN SESIÓN

                Debug.WriteLine($"Login successful for {userData.Login}. Token: {token.Substring(0, 10)}...");
                if (RememberMe)
                {
                    _authService.RememberUser(token, userData.Login!);
                }
                else
                {
                    _authService.ClearRememberedUser();
                }
                await _mainViewModel.NavigateTo<LoadingViewModel>();
            }
            else
            {
                MessageBox.Show(errorMessage ?? "Login failed due to an unknown error.", "Login Failed", MessageBoxButton.OK, MessageBoxImage.Error);
            }
            IsLoading = false;
        }

        [RelayCommand]
        private void Register()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening registration link: {ex.Message}");
                MessageBox.Show($"Could not open registration page: {ex.Message}", "Error", MessageBoxButton.OK, MessageBoxImage.Warning);
            }
        }
    }
}
/// ViewModels End of SignInViewModel.cs ///

/// ViewModels Start of WelcomeViewModel.cs ///
﻿using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection; // Necesario para GetService

namespace SkinHunterLauncher.ViewModels
{
    public partial class WelcomeViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;

        public WelcomeViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Welcome"; // REBRANDED
        }

        [RelayCommand]
        private async Task SignIn()
        {
            await _mainViewModel.NavigateTo<SignInViewModel>();
        }

        [RelayCommand]
        private void Buy()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening BUY link: {ex.Message}");
            }
        }
    }
}
/// ViewModels End of WelcomeViewModel.cs ///

/// Services Start of AuthService.cs ///
﻿using SkinHunterLauncher.Models;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Security.Cryptography;
using System;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using BCryptNet = BCrypt.Net; // AÑADIDO Y USADO CON ALIAS

namespace SkinHunterLauncher.Services
{
    public class AuthService
    {
        private readonly SupabaseService _supabaseService;
        private const string JWTSecret = "skinhunterlaputaquetepariohntvigilacortawachodevuelvanaloan";
        private const string Entropy = "SKINHUNTERLAUNCHER_ENTROPY";

        public AuthService(SupabaseService supabaseService)
        {
            _supabaseService = supabaseService;
        }

        public async Task<(bool Success, string? Token, User? UserData, string? ErrorMessage)> LoginAsync(string username, string password)
        {
            try
            {
                var user = await _supabaseService.GetUserByLogin(username);

                if (user == null || string.IsNullOrEmpty(user.PasswordHash))
                {
                    return (false, null, null, "User not found or password not set.");
                }

                bool isPasswordValid = BCryptNet.BCrypt.Verify(password, user.PasswordHash); // USANDO ALIAS

                if (!isPasswordValid)
                {
                    return (false, null, null, "Incorrect password.");
                }

                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(JWTSecret);
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Subject = new ClaimsIdentity(new[]
                    {
                        new Claim("id", user.Id.ToString()),
                        new Claim(ClaimTypes.Name, user.Login ?? "")
                    }),
                    Expires = DateTime.UtcNow.AddDays(7),
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                var token = tokenHandler.CreateToken(tokenDescriptor);
                string jwtToken = tokenHandler.WriteToken(token);

                return (true, jwtToken, user, null);
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Login exception: {ex.Message}");
                return (false, null, null, $"Login failed: {ex.Message}");
            }
        }

        public void RememberUser(string token, string username)
        {
            try
            {
                byte[] tokenBytes = Encoding.UTF8.GetBytes(token);
                byte[] entropyBytes = Encoding.UTF8.GetBytes(Entropy);
                byte[] protectedToken = ProtectedData.Protect(tokenBytes, entropyBytes, DataProtectionScope.CurrentUser);

                Properties.Settings.Default.RememberedToken = Convert.ToBase64String(protectedToken);
                Properties.Settings.Default.RememberedUsername = username;
                Properties.Settings.Default.Save();
                Debug.WriteLine("User token remembered.");
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to remember user: {ex.Message}");
            }
        }

        public (string? Token, string? Username) GetRememberedUser()
        {
            try
            {
                string? base64ProtectedToken = Properties.Settings.Default.RememberedToken;
                string? rememberedUsername = Properties.Settings.Default.RememberedUsername;

                if (!string.IsNullOrEmpty(base64ProtectedToken) && !string.IsNullOrEmpty(rememberedUsername))
                {
                    byte[] protectedToken = Convert.FromBase64String(base64ProtectedToken);
                    byte[] entropyBytes = Encoding.UTF8.GetBytes(Entropy);
                    byte[] tokenBytes = ProtectedData.Unprotect(protectedToken, entropyBytes, DataProtectionScope.CurrentUser);
                    string token = Encoding.UTF8.GetString(tokenBytes);
                    Debug.WriteLine("User token retrieved from settings.");
                    return (token, rememberedUsername);
                }
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Failed to get remembered user: {ex.Message}. Clearing remembered data.");
                ClearRememberedUser();
            }
            return (null, null);
        }

        public void ClearRememberedUser()
        {
            Properties.Settings.Default.RememberedToken = string.Empty;
            Properties.Settings.Default.RememberedUsername = string.Empty;
            Properties.Settings.Default.Save();
            Debug.WriteLine("Remembered user data cleared.");
        }

        public ClaimsPrincipal? ValidateToken(string token)
        {
            try
            {
                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(JWTSecret);
                tokenHandler.ValidateToken(token, new TokenValidationParameters
                {
                    ValidateIssuerSigningKey = true,
                    IssuerSigningKey = new SymmetricSecurityKey(key),
                    ValidateIssuer = false,
                    ValidateAudience = false,
                    ClockSkew = TimeSpan.Zero
                }, out SecurityToken validatedToken);

                var jwtToken = (JwtSecurityToken)validatedToken;
                var claimsIdentity = new ClaimsIdentity(jwtToken.Claims);
                return new ClaimsPrincipal(claimsIdentity);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Token validation failed: {ex.Message}");
                return null;
            }
        }
    }
}
/// Services End of AuthService.cs ///

/// Services Start of CurrentUserSessionService.cs ///
﻿using SkinHunterLauncher.Models;
using CommunityToolkit.Mvvm.ComponentModel; // Para ObservableObject

namespace SkinHunterLauncher.Services
{
    public partial class CurrentUserSessionService : ObservableObject
    {
        [ObservableProperty]
        private User? _currentUser;

        [ObservableProperty]
        private string? _sessionToken;

        public bool IsUserLoggedIn => CurrentUser != null && !string.IsNullOrEmpty(SessionToken);

        public void SetCurrentUser(User user, string token)
        {
            CurrentUser = user;
            SessionToken = token;
            // Notificar que las propiedades relacionadas con el usuario pueden haber cambiado globalmente
            OnPropertyChanged(nameof(IsUserLoggedIn));
        }

        public void ClearCurrentUser()
        {
            CurrentUser = null;
            SessionToken = null;
            OnPropertyChanged(nameof(IsUserLoggedIn));
        }
    }
}
/// Services End of CurrentUserSessionService.cs ///

/// Services Start of SupabaseService.cs ///
﻿using Supabase;
using System.Threading.Tasks;
using SkinHunterLauncher.Models;
using System.Collections.Generic;
using System.Linq;
using Client = Supabase.Client;
using SupabaseUser = Supabase.Gotrue.User;
using Supabase.Gotrue;
using BCryptNet = BCrypt.Net;
using Postgrest.Responses;
using System.Text.Json;
using System.Net.Http;
using System;
using System.Diagnostics;


namespace SkinHunterLauncher.Services
{
    public class SupabaseService
    {
        private readonly Client _supabase;
        private readonly HttpClient _httpClient;

        private const string SupabaseUrl = "https://odlqwkgewzxxmbsqutja.supabase.co";
        private const string SupabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9kbHF3a2dld3p4eG1ic3F1dGphIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzQyMTM2NzcsImV4cCI6MjA0OTc4OTY3N30.qka6a71bavDeUQgy_BKoVavaClRQa_gT36Au7oO9AF0";

        public SupabaseService()
        {
            var options = new SupabaseOptions
            {
                AutoRefreshToken = true,
                AutoConnectRealtime = true
            };
            _supabase = new Client(SupabaseUrl, SupabaseAnonKey, options);
            _httpClient = new HttpClient();
        }

        public async Task InitializeAsync()
        {
            await _supabase.InitializeAsync();
        }

        public Client GetClient()
        {
            return _supabase;
        }

        public async Task<Models.User?> GetUserByLogin(string login)
        {
            var response = await _supabase.From<Models.User>().Filter("login", Postgrest.Constants.Operator.Equals, login).Get();

            if (response?.ResponseMessage != null && !response.ResponseMessage.IsSuccessStatusCode)
            {
                string errorDetail = response.Content ?? response.ResponseMessage.ReasonPhrase ?? "Unknown error fetching user by login.";
                System.Diagnostics.Debug.WriteLine($"Error fetching user by login {login}: {errorDetail}");
                return null;
            }
            return response?.Models.FirstOrDefault();
        }
        public async Task<Models.User?> GetUserByEmail(string email)
        {
            var response = await _supabase.From<Models.User>().Filter("email", Postgrest.Constants.Operator.Equals, email).Get();

            if (response?.ResponseMessage != null && !response.ResponseMessage.IsSuccessStatusCode)
            {
                string errorDetail = response.Content ?? response.ResponseMessage.ReasonPhrase ?? "Unknown error fetching user by email.";
                System.Diagnostics.Debug.WriteLine($"Error fetching user by email {email}: {errorDetail}");
                return null;
            }
            return response?.Models.FirstOrDefault();
        }

        public async Task<Session?> SignUpUserWithPassword(string email, string password, string username)
        {
            var existingUserByEmail = await GetUserByEmail(email);
            if (existingUserByEmail != null)
            {
                throw new System.Exception("User with this email already exists.");
            }

            var existingUserByLogin = await GetUserByLogin(username);
            if (existingUserByLogin != null)
            {
                throw new System.Exception("User with this login already exists.");
            }

            string hashedPassword = BCryptNet.BCrypt.HashPassword(password);
            var newUser = new Models.User
            {
                Email = email,
                PasswordHash = hashedPassword,
                Login = username,
                Credits = 0,
                IsBuyer = false
            };

            var insertResponse = await _supabase.From<Models.User>().Insert(newUser);

            if (insertResponse?.ResponseMessage != null && insertResponse.ResponseMessage.IsSuccessStatusCode && insertResponse.Models.Any())
            {
                return null;
            }
            else
            {
                string errorMessage = "Failed to register user in custom table.";

                if (insertResponse?.ResponseMessage != null && !insertResponse.ResponseMessage.IsSuccessStatusCode)
                {
                    if (!string.IsNullOrEmpty(insertResponse.Content))
                    {
                        try
                        {
                            var errorDetails = JsonSerializer.Deserialize<Dictionary<string, string>>(insertResponse.Content);
                            if (errorDetails != null && errorDetails.TryGetValue("message", out var msg))
                            {
                                errorMessage = msg;
                            }
                            else
                            {
                                errorMessage = insertResponse.Content;
                            }
                        }
                        catch
                        {
                            errorMessage = insertResponse.Content;
                        }
                    }
                    else if (!string.IsNullOrEmpty(insertResponse.ResponseMessage.ReasonPhrase))
                    {
                        errorMessage = insertResponse.ResponseMessage.ReasonPhrase;
                    }
                }
                else if (insertResponse == null || insertResponse.ResponseMessage == null)
                {
                    errorMessage = "Failed to register user: No valid response from server.";
                }

                System.Diagnostics.Debug.WriteLine($"Supabase Insert Error: {errorMessage}");
                throw new System.Exception(errorMessage);
            }
        }

        public async Task<byte[]?> DownloadFileBytesAsync(string bucketName, string filePathInBucket)
        {
            try
            {
                string storageUrlPart = "/storage/v1";
                string baseUrl = SupabaseUrl.EndsWith(storageUrlPart) ? SupabaseUrl : SupabaseUrl + storageUrlPart;
                string publicUrl = $"{baseUrl}/object/public/{bucketName}/{filePathInBucket}";
                publicUrl = publicUrl.Replace("//object", "/object");

                System.Diagnostics.Debug.WriteLine($"Attempting to download from Storage: {publicUrl}");
                HttpResponseMessage response = await _httpClient.GetAsync(publicUrl);

                if (!response.IsSuccessStatusCode)
                {
                    string errorContent = await response.Content.ReadAsStringAsync();
                    System.Diagnostics.Debug.WriteLine($"Error downloading file from Supabase Storage. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}, Content: {errorContent} (URL: {publicUrl})");
                    return null;
                }
                return await response.Content.ReadAsByteArrayAsync();
            }
            catch (HttpRequestException ex)
            {
                System.Diagnostics.Debug.WriteLine($"HttpRequestException downloading file from Supabase Storage: {ex.Message} (URL: {bucketName}/{filePathInBucket})");
                return null;
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Generic error downloading file {bucketName}/{filePathInBucket}: {ex.Message}");
                return null;
            }
        }

        public async Task<List<SupabaseUpdateLogEntry>?> GetUpdateLogsAsync()
        {
            string bucketName = "version"; // Bucket donde está updates.json
            string filePathInBucket = "updates.json";
            try
            {
                byte[]? fileBytes = await DownloadFileBytesAsync(bucketName, filePathInBucket);
                if (fileBytes == null || fileBytes.Length == 0)
                {
                    Debug.WriteLine($"Supabase {filePathInBucket} not found or is empty in bucket '{bucketName}'.");
                    return null;
                }
                string jsonContent = System.Text.Encoding.UTF8.GetString(fileBytes);
                var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
                return JsonSerializer.Deserialize<List<SupabaseUpdateLogEntry>>(jsonContent, options);
            }
            catch (Exception ex)
            {
                Debug.WriteLine($"Error fetching/parsing Supabase {filePathInBucket}: {ex.Message}");
                return null;
            }
        }
    }
}
/// Services End of SupabaseService.cs ///

/// Resources Start of LauncherSpecificStyles.xaml ///
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:SkinHunterLauncher.Converters">

    <converters:StringIsNullOrEmptyConverter x:Key="StringIsNullOrEmptyConverter"/>
    <converters:ColorBrightnessConverter x:Key="ColorBrightnessConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <converters:VersionStatusToColorConverter x:Key="VersionStatusToColorConverter"/>

    <FontFamily x:Key="DongleFontFamily">pack://application:,,,/Assets/#Dongle</FontFamily>

    <Color x:Key="LauncherPageBackgroundValue">#0A0A0A</Color>
    <Color x:Key="LauncherContentBackgroundValue">#10101A</Color>
    <Color x:Key="LauncherForegroundColorValue">#EAEAF5</Color>
    <Color x:Key="LauncherAccentColorValue">#6C63FF</Color>
    <Color x:Key="LauncherSubtleTextColorValue">#A0A0B0</Color>
    <Color x:Key="LauncherInputBackgroundColorValue">#1A1A1A</Color>
    <Color x:Key="LauncherInputBorderColorValue">#303040</Color>
    <Color x:Key="LauncherButtonBackgroundColorValue">#2A2A3A</Color>
    <Color x:Key="LauncherButtonHoverColorValue">#3A3A4A</Color>
    <Color x:Key="LauncherScrollbarBackgroundColorValue">#181824</Color>
    <Color x:Key="LauncherScrollbarThumbColorValue">#303040</Color>
    <Color x:Key="LauncherScrollbarThumbHoverColorValue">#484858</Color>

    <SolidColorBrush x:Key="LauncherPageBackgroundBrush" Color="{StaticResource LauncherPageBackgroundValue}"/>
    <SolidColorBrush x:Key="LauncherContentBackgroundBrush" Color="{StaticResource LauncherContentBackgroundValue}"/>
    <SolidColorBrush x:Key="LauncherForegroundBrush" Color="{StaticResource LauncherForegroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherAccentBrush" Color="{StaticResource LauncherAccentColorValue}"/>
    <SolidColorBrush x:Key="LauncherSubtleTextBrush" Color="{StaticResource LauncherSubtleTextColorValue}"/>
    <SolidColorBrush x:Key="LauncherInputBackgroundBrush" Color="{StaticResource LauncherInputBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherInputBorderBrush" Color="{StaticResource LauncherInputBorderColorValue}"/>
    <SolidColorBrush x:Key="LauncherButtonBackgroundBrush" Color="{StaticResource LauncherButtonBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherButtonHoverBrush" Color="{StaticResource LauncherButtonHoverColorValue}"/>
    <SolidColorBrush x:Key="LauncherScrollbarBackgroundBrush" Color="{StaticResource LauncherScrollbarBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherScrollbarThumbBrush" Color="{StaticResource LauncherScrollbarThumbColorValue}"/>
    <SolidColorBrush x:Key="LauncherScrollbarThumbHoverBrush" Color="{StaticResource LauncherScrollbarThumbHoverColorValue}"/>

    <Style TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="{StaticResource DongleFontFamily}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="{StaticResource DongleFontFamily}"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>
    <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>
    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
    </Style>

    <Style x:Key="LauncherWindowStyle" TargetType="Window">
        <Setter Property="Background" Value="{StaticResource LauncherPageBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
        <Setter Property="FontFamily" Value="{StaticResource DongleFontFamily}"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Icon" Value="pack://application:,,,/Assets/icon.ico"/>
    </Style>

    <Style x:Key="LauncherTitleBarTextBlockStyle" TargetType="TextBlock">
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
    </Style>

    <Style x:Key="LauncherTitleBarButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="0">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource LauncherButtonHoverBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource LauncherAccentBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherCloseButtonStyle" TargetType="Button" BasedOn="{StaticResource LauncherTitleBarButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#F1707A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LauncherPrimaryButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="30,10,30,12"/>
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="PART_Border" Background="{TemplateBinding Background}" CornerRadius="4" SnapsToDevicePixels="True">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="True"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.85}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.70}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Border" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherSecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource LauncherPrimaryButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LauncherButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
    </Style>

    <Style x:Key="LauncherLinkButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5,0"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock x:Name="PART_Text" Text="{TemplateBinding Content}" TextDecorations="None" SnapsToDevicePixels="True">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock" BasedOn="{StaticResource {x:Type TextBlock}}">
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"/>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Text" Property="TextDecorations" Value="Underline"/>
                            <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.8}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherTextBoxWithIconStyle" TargetType="TextBox">
        <Setter Property="Background" Value="{StaticResource LauncherInputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LauncherInputBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10,0,10,0"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="CaretBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path Grid.Column="0" Data="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Fill="{StaticResource LauncherSubtleTextBrush}" Width="16" Height="16" 
                                  VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,8,0"
                                  Stretch="Uniform" IsHitTestVisible="False" SnapsToDevicePixels="True"/>
                            <Grid Grid.Column="1" SnapsToDevicePixels="True">
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="false" 
                                              HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="True"/>
                                <TextBlock Text="{Binding ToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                           Foreground="{StaticResource LauncherSubtleTextBrush}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="2,0"
                                           Visibility="Collapsed" x:Name="PlaceholderText" IsHitTestVisible="False"
                                           FontFamily="{StaticResource DongleFontFamily}" FontSize="24" SnapsToDevicePixels="True"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value=""/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="Text" Value="{x:Null}"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="PasswordBox">
        <Setter Property="FontFamily" Value="{StaticResource DongleFontFamily}"/>
        <Setter Property="FontSize" Value="24"/>
        <Setter Property="Background" Value="{StaticResource LauncherInputBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LauncherInputBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10,0,10,0"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="CaretBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="PasswordChar" Value="●"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="PasswordBox">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                             BorderBrush="{TemplateBinding BorderBrush}"
                             BorderThickness="{TemplateBinding BorderThickness}"
                             CornerRadius="4" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                        <Grid SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Path Grid.Column="0" Data="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Fill="{StaticResource LauncherSubtleTextBrush}" Width="16" Height="16" 
                                  VerticalAlignment="Center" HorizontalAlignment="Left" Margin="0,0,8,0"
                                  Stretch="Uniform" IsHitTestVisible="False" SnapsToDevicePixels="True"/>
                            <Grid Grid.Column="1" SnapsToDevicePixels="True">
                                <ScrollViewer Grid.Column="1" x:Name="PART_ContentHost" Focusable="false" 
                                              HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" SnapsToDevicePixels="True"/>
                                <TextBlock Text="{Binding ToolTip, RelativeSource={RelativeSource TemplatedParent}}"
                                           Foreground="{StaticResource LauncherSubtleTextBrush}"
                                           VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Padding="2,0"
                                           Visibility="Collapsed" x:Name="PlaceholderText" IsHitTestVisible="False"
                                           FontFamily="{StaticResource DongleFontFamily}" FontSize="24" SnapsToDevicePixels="True"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=Password, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNullOrEmptyConverter}}" Value="True">
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </DataTrigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Password, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNullOrEmptyConverter}}" Value="True"/>
                                <Condition Binding="{Binding Path=IsKeyboardFocused, RelativeSource={RelativeSource Self}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Visible"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Password, RelativeSource={RelativeSource Self}, Converter={StaticResource StringIsNullOrEmptyConverter}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PlaceholderText" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Display"/>
        <Setter Property="TextOptions.TextHintingMode" Value="Fixed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal" SnapsToDevicePixels="True">
                        <Border x:Name="checkBoxBorder" Width="18" Height="18" CornerRadius="3"
                                Background="{StaticResource LauncherInputBackgroundBrush}"
                                BorderBrush="{StaticResource LauncherInputBorderBrush}"
                                BorderThickness="1" VerticalAlignment="Center" SnapsToDevicePixels="True">
                            <Path x:Name="checkMark" Width="10" Height="10" Stretch="Uniform"
                                  Fill="{StaticResource LauncherAccentBrush}"
                                  Data="M4.5,10.5 L1.5,7.5 L2.5,6.5 L4.5,8.5 L9.5,3.5 L10.5,4.5 Z"
                                  Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="True"/>
                        </Border>
                        <ContentPresenter Margin="8,0,0,0" VerticalAlignment="Center" SnapsToDevicePixels="True"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernScrollBarThumbStyle" TargetType="{x:Type Thumb}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border x:Name="ThumbVisual"
                            Background="{StaticResource LauncherScrollbarThumbBrush}"
                            BorderBrush="Transparent"
                            BorderThickness="0"
                            CornerRadius="4"
                            Width="8" Margin="-1,2"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ThumbVisual" Property="Background" Value="{StaticResource LauncherScrollbarThumbHoverBrush}"/>
                        </Trigger>
                        <Trigger Property="IsDragging" Value="True">
                            <Setter TargetName="ThumbVisual" Property="Background" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ModernScrollBarPageButtonStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource LauncherScrollbarBackgroundBrush}"/>
        <Setter Property="Width" Value="10"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ScrollBar}">
                    <Border Background="{TemplateBinding Background}" CornerRadius="5" Padding="1">
                        <Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}">
                            <Track.DecreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ModernScrollBarPageButtonStyle}" Command="ScrollBar.PageUpCommand"/>
                            </Track.DecreaseRepeatButton>
                            <Track.IncreaseRepeatButton>
                                <RepeatButton Style="{StaticResource ModernScrollBarPageButtonStyle}" Command="ScrollBar.PageDownCommand"/>
                            </Track.IncreaseRepeatButton>
                            <Track.Thumb>
                                <Thumb Style="{StaticResource ModernScrollBarThumbStyle}"/>
                            </Track.Thumb>
                        </Track>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto"/>
                <Setter Property="Height" Value="10"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ScrollBar}">
                            <Border Background="{TemplateBinding Background}" CornerRadius="5" Padding="1">
                                <Track x:Name="PART_Track" IsDirectionReversed="false" IsEnabled="{TemplateBinding IsMouseOver}">
                                    <Track.DecreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ModernScrollBarPageButtonStyle}" Command="ScrollBar.PageLeftCommand"/>
                                    </Track.DecreaseRepeatButton>
                                    <Track.IncreaseRepeatButton>
                                        <RepeatButton Style="{StaticResource ModernScrollBarPageButtonStyle}" Command="ScrollBar.PageRightCommand"/>
                                    </Track.IncreaseRepeatButton>
                                    <Track.Thumb>
                                        <Thumb Style="{StaticResource ModernScrollBarThumbStyle}" Height="8" Width="Auto" Margin="2,-1"/>
                                    </Track.Thumb>
                                </Track>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LauncherLoadingSpinnerStyle" TargetType="ProgressBar" >
        <Setter Property="IsIndeterminate" Value="True"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar" >
                    <Grid RenderTransformOrigin="0.5,0.5">
                        <Ellipse Stroke="{StaticResource LauncherInputBorderBrush}" StrokeThickness="3" Opacity="0.4"/>
                        <Path Name="PART_Indicator" Stroke="{TemplateBinding Foreground}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"
                                Data="M25,3 A22,22 0 0 1 47,25">
                            <Path.RenderTransform>
                                <RotateTransform Angle="0" CenterX="25" CenterY="25" />
                            </Path.RenderTransform>
                        </Path>
                        <Grid.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Indicator" 
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" 
                                                         From="0" To="360" Duration="0:0:0.8" RepeatBehavior="Forever"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Grid.Triggers>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UpdateLogSectionStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource LauncherButtonBackgroundBrush}"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Margin" Value="0,0,0,15"/>
        <Setter Property="CornerRadius" Value="4"/>
    </Style>

    <Style x:Key="UpdateLogTitleStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="FontSize" Value="26"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="Margin" Value="0,0,0,8"/>
    </Style>

    <Style x:Key="UpdateLogItemStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="FontSize" Value="22"/>
        <Setter Property="Margin" Value="10,0,0,4"/>
    </Style>
</ResourceDictionary>
/// Resources End of LauncherSpecificStyles.xaml ///

/// Models Start of SupabaseUpdateLog.cs ///
﻿using System.Collections.Generic;
using System.Text.Json.Serialization;
using CommunityToolkit.Mvvm.ComponentModel;

namespace SkinHunterLauncher.Models
{
    public class SupabaseUpdateLogEntry
    {
        [JsonPropertyName("version")]
        public string? Version { get; set; }

        [JsonPropertyName("title")]
        public string? Title { get; set; }

        [JsonPropertyName("date")]
        public string? Date { get; set; }

        [JsonPropertyName("changes")]
        public List<string>? Changes { get; set; }
    }

    // Clase contenedora si tu JSON es una lista de estos objetos
    public class SupabaseUpdateLogList : ObservableObject
    {
        private List<SupabaseUpdateLogEntry> _logs = new List<SupabaseUpdateLogEntry>();
        public List<SupabaseUpdateLogEntry> Logs
        {
            get => _logs;
            set => SetProperty(ref _logs, value);
        }
    }
}
/// Models End of SupabaseUpdateLog.cs ///

/// Models Start of UpdateLogEntry.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel; // Necesitas este using si ObservableObject viene de aquí
using System.Collections.Generic;


namespace SkinHunterLauncher.Models
{
    public class UpdateLogEntry : ObservableObject // Asegúrate que ObservableObject está disponible
    {
        private string _title = string.Empty;
        public string Title
        {
            get => _title;
            set => SetProperty(ref _title, value);
        }

        private List<string> _changes = [];
        public List<string> Changes
        {
            get => _changes;
            set => SetProperty(ref _changes, value);
        }
    }
}
/// Models End of UpdateLogEntry.cs ///

/// Models Start of User.cs ///
﻿using Postgrest.Models;
using Postgrest.Attributes;
using System;

namespace SkinHunterLauncher.Models
{
    [Table("users")]
    public class User : BaseModel
    {
        [PrimaryKey("id", false)] // 'false' porque es probable que tu int4 sea auto-incremental (identity) o gestionado por secuencia
        public int Id { get; set; } // CAMBIADO DE Guid A int

        [Column("email")]
        public string? Email { get; set; }

        [Column("password")]
        public string? PasswordHash { get; set; }

        [Column("login")]
        public string? Login { get; set; }

        [Column("fichasporskin")]
        public int Credits { get; set; } // Asumiendo que 'numeric' en Supabase mapea bien a 'int' o 'decimal' en C#. 'int' es más simple si no necesitas decimales. Si necesitas decimales, usa 'decimal'.

        [Column("escomprador")]
        public bool IsBuyer { get; set; }

        [Column("created_at")]
        public DateTime CreatedAt { get; set; }
    }
}
/// Models End of User.cs ///

/// Converters Start of BooleanToVisibilityConverter.cs ///
﻿// SkinHunterLauncher/Converters/BooleanToVisibilityConverter.cs
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterLauncher.Converters // Asegúrate que este namespace es correcto
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool bValue)
            {
                flag = bValue;
            }

            // Considera si el parámetro "Inverse" es necesario aquí,
            // si no, puedes simplificar esta lógica.
            // Si no pasas "Inverse" como ConverterParameter, esta parte no se usa.
            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }


            if (inverse)
            {
                return !flag ? Visibility.Visible : Visibility.Collapsed;
            }
            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }

            bool flag = (value is Visibility v) && v == Visibility.Visible;

            if (inverse)
            {
                return !flag;
            }
            return flag;
        }
    }
}
/// Converters End of BooleanToVisibilityConverter.cs ///

/// Converters Start of ColorBrightnessConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace SkinHunterLauncher.Converters
{
    public class ColorBrightnessConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is SolidColorBrush originalBrush)
            {
                Color originalColor = originalBrush.Color;
                float factor = 1.0f;
                if (parameter != null && float.TryParse(parameter.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out float parsedFactor))
                {
                    factor = parsedFactor;
                }

                byte r = (byte)Math.Max(0, Math.Min(255, originalColor.R * factor));
                byte g = (byte)Math.Max(0, Math.Min(255, originalColor.G * factor));
                byte b = (byte)Math.Max(0, Math.Min(255, originalColor.B * factor));

                return new SolidColorBrush(Color.FromArgb(originalColor.A, r, g, b));
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ColorBrightnessConverter.cs ///

/// Converters Start of StringIsNullOrEmptyConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;

namespace SkinHunterLauncher.Converters
{
    public class StringIsNullOrEmptyConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            return string.IsNullOrEmpty(value as string);
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotSupportedException();
        }
    }
}
/// Converters End of StringIsNullOrEmptyConverter.cs ///

/// Converters Start of VersionStatusToColorConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace SkinHunterLauncher.Converters
{
    public class VersionStatusToColorConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is string status)
            {
                return status.ToUpperInvariant() switch
                {
                    "UPDATED" => Brushes.LightGreen,
                    "OUTDATED" => Brushes.OrangeRed,
                    "CHECKING..." => Brushes.LightSkyBlue,
                    "ERROR" => Brushes.Red,
                    "LOCAL N/A" => Brushes.Yellow,
                    "LOCAL ERROR" => Brushes.Orange,
                    "UNKNOWN" => Brushes.LightGray,
                    "DB ERROR" => Brushes.MediumVioletRed,
                    _ => Brushes.White, // Default color
                };
            }
            return Brushes.White;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of VersionStatusToColorConverter.cs ///

