/// SkinHunterLauncher Start of App.xaml ///
﻿<Application x:Class="SkinHunterLauncher.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SkinHunterLauncher">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Resources/LauncherSpecificStyles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>
</Application>
/// SkinHunterLauncher End of App.xaml ///

/// SkinHunterLauncher Start of App.xaml.cs ///
﻿using Microsoft.Extensions.DependencyInjection;
using SkinHunterLauncher.ViewModels;
using System;
using System.Windows;

namespace SkinHunterLauncher
{
    public partial class App : Application
    {
        public static IServiceProvider? ServiceProvider { get; private set; }

        protected override void OnStartup(StartupEventArgs e)
        {
            base.OnStartup(e);

            var serviceCollection = new ServiceCollection();
            ConfigureServices(serviceCollection);
            ServiceProvider = serviceCollection.BuildServiceProvider();

            var launcherWindow = ServiceProvider.GetRequiredService<LauncherWindow>();
            launcherWindow.Show();
        }

        private void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<LauncherMainViewModel>();
            services.AddTransient<WelcomeViewModel>();
            services.AddTransient<SignInViewModel>();
            services.AddTransient<LoadingViewModel>();
            services.AddTransient<MainLauncherViewModel>();

            services.AddSingleton<LauncherWindow>();
        }
    }
}
/// SkinHunterLauncher End of App.xaml.cs ///

/// SkinHunterLauncher Start of LauncherWindow.xaml ///
<Window x:Class="SkinHunterLauncher.LauncherWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
        xmlns:v="clr-namespace:SkinHunterLauncher.Views"
        mc:Ignorable="d"
        Title="{Binding Title, FallbackValue='Skin-Hunter'}"
	Height="600" Width="420" MinHeight="500" MinWidth="380"
	Style="{StaticResource LauncherWindowStyle}"
	WindowStartupLocation="CenterScreen">

	<WindowChrome.WindowChrome>
		<WindowChrome CaptionHeight="35" ResizeBorderThickness="8" GlassFrameThickness="0" CornerRadius="0" UseAeroCaptionButtons="False"/>
	</WindowChrome.WindowChrome>

	<Window.Resources>
		<ResourceDictionary>
			<DataTemplate DataType="{x:Type vm:WelcomeViewModel}">
				<v:WelcomeView/>
			</DataTemplate>
			<DataTemplate DataType="{x:Type vm:SignInViewModel}">
				<v:SignInView/>
			</DataTemplate>
			<DataTemplate DataType="{x:Type vm:LoadingViewModel}">
				<v:LoadingView/>
			</DataTemplate>
			<DataTemplate DataType="{x:Type vm:MainLauncherViewModel}">
				<v:MainLauncherView/>
			</DataTemplate>
		</ResourceDictionary>
	</Window.Resources>

	<Border Background="{StaticResource LauncherBackgroundBrush}" CornerRadius="6" BorderThickness="1" BorderBrush="{StaticResource LauncherBorderBrush}">
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="Auto"/>
				<RowDefinition Height="*"/>
			</Grid.RowDefinitions>

			<Border Grid.Row="0" Height="35" Background="Transparent" MouseLeftButtonDown="TitleBar_MouseLeftButtonDown">
				<DockPanel LastChildFill="False">
					<StackPanel DockPanel.Dock="Left" Orientation="Horizontal" VerticalAlignment="Center" Margin="10,0,0,0">
						<!-- El TextBlock aquí ahora está vinculado al Title del DataContext (LauncherMainViewModel) -->
						<TextBlock Text="{Binding Title, FallbackValue='Skin-Hunter'}" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="13" VerticalAlignment="Center"/>
					</StackPanel>

					<StackPanel DockPanel.Dock="Right" Orientation="Horizontal" HorizontalAlignment="Right">
						<Button Style="{StaticResource LauncherTitleBarButtonStyle}" Command="{Binding MinimizeApplicationCommand}" ToolTip="Minimize">
							<Path Data="M0,5 H10 V6 H0 Z" Fill="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" Width="10" Height="10" Stretch="None"/>
						</Button>
						<Button Style="{StaticResource LauncherCloseButtonStyle}" Command="{Binding CloseApplicationCommand}" ToolTip="Close">
							<Path Data="M0,0 L10,10 M10,0 L0,10" Stroke="{Binding Foreground, RelativeSource={RelativeSource AncestorType=Button}}" StrokeThickness="1.2" Width="9" Height="9" Stretch="Uniform"/>
						</Button>
					</StackPanel>
				</DockPanel>
			</Border>

			<ContentControl Grid.Row="1" Content="{Binding CurrentViewModel}" HorizontalAlignment="Stretch" VerticalContentAlignment="Stretch"/>

			<Grid Grid.Row="0" Grid.RowSpan="2" Background="#88000000"
                  Visibility="{Binding IsLoading, Converter={StaticResource BooleanToVisibilityConverter}, FallbackValue=Collapsed}"
                  d:IsHidden="True">
				<ProgressBar Style="{StaticResource LauncherLoadingSpinnerStyle}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
			</Grid>
		</Grid>
	</Border>
</Window>
/// SkinHunterLauncher End of LauncherWindow.xaml ///

/// SkinHunterLauncher Start of LauncherWindow.xaml.cs ///
﻿using SkinHunterLauncher.ViewModels;
using System.Windows;
using System.Windows.Input;
using System.ComponentModel; // Para PropertyChangedEventHandler

namespace SkinHunterLauncher
{
    public partial class LauncherWindow : Window
    {
        public LauncherWindow(LauncherMainViewModel viewModel)
        {
            InitializeComponent();
            DataContext = viewModel;
            Loaded += LauncherWindow_Loaded;
        }

        private async void LauncherWindow_Loaded(object sender, RoutedEventArgs e)
        {
            if (DataContext is LauncherMainViewModel vm)
            {
                // Llama a InitializeAsync del MainViewModel para que configure la vista inicial
                await vm.InitializeAsync();

                // Suscribirse a PropertyChanged para actualizar el tamaño de la ventana
                // y el título de la ventana cuando CurrentViewModel cambie.
                vm.PropertyChanged += ViewModel_PropertyChanged;

                // Actualizar estado inicial basado en el CurrentViewModel que se acaba de establecer
                if (vm.CurrentViewModel != null)
                {
                    UpdateWindowStateForViewModel(vm.CurrentViewModel);
                    this.Title = vm.CurrentViewModel.Title; // Establecer el título inicial de la ventana
                }
            }
        }

        private void ViewModel_PropertyChanged(object? sender, PropertyChangedEventArgs e)
        {
            if (e.PropertyName == nameof(LauncherMainViewModel.CurrentViewModel) && sender is LauncherMainViewModel vm)
            {
                if (vm.CurrentViewModel != null)
                {
                    // Asegurarse de que esto se ejecuta en el hilo de la UI
                    Dispatcher.Invoke(() => {
                        UpdateWindowStateForViewModel(vm.CurrentViewModel);
                        this.Title = vm.CurrentViewModel.Title; // Actualizar el título de la ventana
                    });
                }
            }
        }

        private void UpdateWindowStateForViewModel(LauncherBaseViewModel? viewModel)
        {
            if (viewModel is WelcomeViewModel || viewModel is SignInViewModel || viewModel is LoadingViewModel)
            {
                this.Width = 420;
                this.Height = 600;
                this.MinWidth = 380;
                this.MinHeight = 500;
                this.ResizeMode = ResizeMode.CanMinimize;
            }
            else if (viewModel is MainLauncherViewModel)
            {
                this.Width = 800;
                this.Height = 550;
                this.MinWidth = 700;
                this.MinHeight = 500;
                this.ResizeMode = ResizeMode.CanResizeWithGrip;
            }
        }

        private void TitleBar_MouseLeftButtonDown(object sender, MouseButtonEventArgs e)
        {
            if (e.ButtonState == MouseButtonState.Pressed)
            {
                DragMove();
            }
        }
    }
}
/// SkinHunterLauncher End of LauncherWindow.xaml.cs ///

/// Views Start of LoadingView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.LoadingView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:LoadingViewModel}"
             d:DesignHeight="450" d:DesignWidth="400" Background="Transparent">
    <Grid>
        <ProgressBar Style="{StaticResource LauncherLoadingSpinnerStyle}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
    </Grid>
</UserControl>
/// Views End of LoadingView.xaml ///

/// Views Start of LoadingView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class LoadingView : UserControl
    {
        public LoadingView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of LoadingView.xaml.cs ///

/// Views Start of MainLauncherView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.MainLauncherView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             xmlns:m="clr-namespace:SkinHunterLauncher.Models"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:MainLauncherViewModel}"
             d:DesignHeight="550" d:DesignWidth="800" Background="Transparent">
    <Grid Margin="30">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="3*" MinWidth="300"/>
            <ColumnDefinition Width="2*" MinWidth="250"/>
        </Grid.ColumnDefinitions>

        <ScrollViewer Grid.Column="0" VerticalScrollBarVisibility="Auto" HorizontalScrollBarVisibility="Disabled" Margin="0,0,20,0">
            <ItemsControl ItemsSource="{Binding UpdateLogs}">
                <ItemsControl.ItemTemplate>
                    <DataTemplate DataType="{x:Type m:UpdateLogEntry}">
                        <Border Style="{StaticResource UpdateLogSectionStyle}">
                            <StackPanel>
                                <TextBlock Text="{Binding Title}" Style="{StaticResource UpdateLogTitleStyle}"/>
                                <ItemsControl ItemsSource="{Binding Changes}">
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate>
                                            <DockPanel LastChildFill="True">
                                                <TextBlock Text="• " Foreground="{StaticResource LauncherSubtleTextBrush}" VerticalAlignment="Top"/>
                                                <TextBlock Text="{Binding}" Style="{StaticResource UpdateLogItemStyle}" TextWrapping="Wrap"/>
                                            </DockPanel>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>
                            </StackPanel>
                        </Border>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>
            </ItemsControl>
        </ScrollViewer>

        <Border Grid.Column="1" Background="{StaticResource LauncherButtonBackgroundBrush}" CornerRadius="6" Padding="25">
            <StackPanel>
                <Border Height="180" CornerRadius="4" Margin="0,0,0,20" Background="#1C1C28" ClipToBounds="True">
                    <TextBlock Text="Skin-Hunter" Foreground="{StaticResource LauncherAccentBrush}" Opacity="0.6" FontSize="36" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center"/>
                </Border>

                <Grid Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Game" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="14" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding GameName}" Foreground="{StaticResource LauncherForegroundBrush}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                </Grid>
                <Grid Margin="0,0,0,10">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Status" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="14" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding Status}" Foreground="LightGreen" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                </Grid>
                <Grid Margin="0,0,0,30">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <TextBlock Grid.Column="0" Text="Expires" Foreground="{StaticResource LauncherSubtleTextBrush}" FontSize="14" Margin="0,0,10,0"/>
                    <TextBlock Grid.Column="1" Text="{Binding ExpiryDate}" Foreground="{StaticResource LauncherAccentBrush}" FontSize="14" FontWeight="SemiBold" HorizontalAlignment="Right"/>
                </Grid>

                <Button Content="▶ PLAY" Style="{StaticResource LauncherPrimaryButtonStyle}" 
                        Command="{Binding PlayCommand}" HorizontalAlignment="Stretch" Padding="0" Height="50" FontSize="18"/>
            </StackPanel>
        </Border>
    </Grid>
</UserControl>
/// Views End of MainLauncherView.xaml ///

/// Views Start of MainLauncherView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class MainLauncherView : UserControl
    {
        public MainLauncherView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of MainLauncherView.xaml.cs ///

/// Views Start of SignInView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.SignInView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:SignInViewModel}"
             d:DesignHeight="450" d:DesignWidth="400" Background="Transparent">
    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="320">
        <TextBlock Text="Sign in" FontSize="26" FontWeight="Bold" 
                   Foreground="{StaticResource LauncherForegroundBrush}" 
                   HorizontalAlignment="Left" Margin="0,0,0,5"/>
        <TextBlock Text="to continue to Skin-Hunter" FontSize="15"
                   Foreground="{StaticResource LauncherSubtleTextBrush}" 
                   HorizontalAlignment="Left" Margin="0,0,0,30"/>

        <!-- ELIMINADO EL TEXTBOX DE LICENSE KEY -->
        <!-- <TextBlock Text="License key" FontSize="14" Foreground="{StaticResource LauncherSubtleTextBrush}" Margin="0,0,0,8"/> -->
        <!-- <TextBox Style="{StaticResource LauncherTextBoxStyle}" Text="{Binding LicenseKey, UpdateSourceTrigger=PropertyChanged}" Margin="0,0,0,20"/> -->

        <Button Content="Sign In with Discord" Style="{StaticResource LauncherDiscordButtonStyle}" 
                Command="{Binding SignInWithDiscordCommand}" Margin="0,0,0,20"/>
        
        <CheckBox Content="Remember me" IsChecked="{Binding RememberMe}" 
                  Style="{StaticResource LauncherCheckBoxStyle}" Margin="0,0,0,35"/>
        
    </StackPanel>
</UserControl>
/// Views End of SignInView.xaml ///

/// Views Start of SignInView.xaml.cs ///
﻿using System.Windows.Controls;
namespace SkinHunterLauncher.Views
{
    public partial class SignInView : UserControl
    {
        public SignInView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of SignInView.xaml.cs ///

/// Views Start of WelcomeView.xaml ///
<UserControl x:Class="SkinHunterLauncher.Views.WelcomeView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:SkinHunterLauncher.ViewModels"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type=vm:WelcomeViewModel}"
             d:DesignHeight="450" d:DesignWidth="400"
             Background="Transparent">
    <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Width="300">
        <TextBlock Text="Welcome!" FontSize="28" FontWeight="Bold" Foreground="{StaticResource LauncherForegroundBrush}" HorizontalAlignment="Center" Margin="0,0,0,10"/>
        <TextBlock Text="Choose what you want to do" FontSize="16" Foreground="{StaticResource LauncherSubtleTextBrush}" HorizontalAlignment="Center" Margin="0,0,0,30"/>

        <Button Content="SIGN IN" Style="{StaticResource LauncherPrimaryButtonStyle}" 
                Command="{Binding SignInCommand}" Margin="0,0,0,15"/>
        <Button Content="BUY" Style="{StaticResource LauncherSecondaryButtonStyle}"
                Command="{Binding BuyCommand}"/>
    </StackPanel>
</UserControl>
/// Views End of WelcomeView.xaml ///

/// Views Start of WelcomeView.xaml.cs ///
﻿using System.Windows.Controls;

namespace SkinHunterLauncher.Views
{
    public partial class WelcomeView : UserControl
    {
        public WelcomeView()
        {
            InitializeComponent();
        }
    }
}
/// Views End of WelcomeView.xaml.cs ///

/// ViewModels Start of LauncherBaseViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using System.Threading.Tasks;

namespace SkinHunterLauncher.ViewModels
{
    public abstract partial class LauncherBaseViewModel : ObservableObject
    {
        [ObservableProperty]
        [NotifyPropertyChangedFor(nameof(IsNotLoading))]
        private bool _isLoading;

        public bool IsNotLoading => !IsLoading;

        [ObservableProperty]
        private string _title = "Skin-Hunter"; // REBRANDED

        public virtual Task InitializeAsync(object? parameter = null)
        {
            return Task.CompletedTask;
        }
    }
}
/// ViewModels End of LauncherBaseViewModel.cs ///

/// ViewModels Start of LauncherMainViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System;
using System.Threading.Tasks;
using System.Windows;

namespace SkinHunterLauncher.ViewModels
{
    public partial class LauncherMainViewModel : LauncherBaseViewModel
    {
        private readonly IServiceProvider _serviceProvider;

        [ObservableProperty]
        private LauncherBaseViewModel? _currentViewModel;

        public LauncherMainViewModel(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
            Title = "Skin-Hunter"; // REBRANDED - Main window title
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            if (CurrentViewModel == null) // Solo navega si no hay ya una vista actual
            {
                await NavigateTo<WelcomeViewModel>();
            }
        }

        public async Task NavigateTo<TViewModel>(object? parameter = null) where TViewModel : LauncherBaseViewModel
        {
            if (CurrentViewModel is IDisposable disposableOld)
            {
                disposableOld.Dispose();
            }

            var newViewModel = _serviceProvider.GetService(typeof(TViewModel)) as LauncherBaseViewModel;
            if (newViewModel != null)
            {
                IsLoading = true;
                CurrentViewModel = newViewModel;
                if (Application.Current.MainWindow != null) // Actualiza el título de la ventana real
                {
                    Application.Current.MainWindow.Title = CurrentViewModel.Title;
                }
                await CurrentViewModel.InitializeAsync(parameter);
                IsLoading = false;
            }
        }

        [RelayCommand]
        private void CloseApplication()
        {
            Application.Current.Shutdown();
        }

        [RelayCommand]
        private void MinimizeApplication()
        {
            if (Application.Current.MainWindow != null)
            {
                Application.Current.MainWindow.WindowState = WindowState.Minimized;
            }
        }
    }
}
/// ViewModels End of LauncherMainViewModel.cs ///

/// ViewModels Start of LoadingViewModel.cs ///
﻿using System.Threading.Tasks;
using System;
using Microsoft.Extensions.DependencyInjection; // Necesario para GetService

namespace SkinHunterLauncher.ViewModels
{
    public partial class LoadingViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;
        public LoadingViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Loading"; // REBRANDED
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            await Task.Delay(1500); // Reducido para pruebas más rápidas
            await _mainViewModel.NavigateTo<MainLauncherViewModel>();
        }
    }
}
/// ViewModels End of LoadingViewModel.cs ///

/// ViewModels Start of MainLauncherViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using SkinHunterLauncher.Models;
using System.Collections.ObjectModel;
using System.Threading.Tasks;
using System.Windows;
using System.IO;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection; // Necesario para GetService

namespace SkinHunterLauncher.ViewModels
{
    public partial class MainLauncherViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;

        [ObservableProperty]
        private string _gameName = "CS2";

        [ObservableProperty]
        private string _status = "safe";

        [ObservableProperty]
        private string _expiryDate = "05.10";

        public ObservableCollection<UpdateLogEntry> UpdateLogs { get; } = [];

        public MainLauncherViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Home"; // REBRANDED
            LoadUpdateLogs();
        }

        private void LoadUpdateLogs()
        {
            UpdateLogs.Add(new UpdateLogEntry
            {
                Title = "UPDATE",
                Changes = ["Fixed crashes", "Update log", "Update log 1"]
            });
            UpdateLogs.Add(new UpdateLogEntry
            {
                Title = "UPDATE",
                Changes = ["New UI", "Update log", "Update log 1"]
            });
            UpdateLogs.Add(new UpdateLogEntry
            {
                Title = "UPDATE",
                Changes = ["Performance improvements", "Added new feature X", "Bug fixes for Y"]
            });
        }

        [RelayCommand]
        private void Play()
        {
            string mainAppExecutableName = "SkinHunterWPF.exe";
            string launcherDirectory = AppDomain.CurrentDomain.BaseDirectory;
            string mainAppPath = Path.Combine(launcherDirectory, mainAppExecutableName);

            if (!File.Exists(mainAppPath))
            {
                Debug.WriteLine($"Primary path not found: {mainAppPath}. Attempting development path discovery...");
                try
                {
                    DirectoryInfo? currentDirInfo = new DirectoryInfo(launcherDirectory);
                    DirectoryInfo? binDir = currentDirInfo.Parent?.Parent;
                    DirectoryInfo? projectLauncherDir = binDir?.Parent;
                    DirectoryInfo? solutionDir = projectLauncherDir?.Parent;

                    if (solutionDir != null)
                    {
                        string skinHunterWPFProjectDirName = "SkinHunterWPF";
                        string targetFramework = currentDirInfo.Name;
                        string configuration = currentDirInfo.Parent?.Name ?? "Debug";

                        string devMainAppPath = Path.Combine(solutionDir.FullName, skinHunterWPFProjectDirName, "bin", configuration, targetFramework, mainAppExecutableName);
                        Debug.WriteLine($"Attempting development path: {devMainAppPath}");
                        if (File.Exists(devMainAppPath))
                        {
                            mainAppPath = devMainAppPath;
                        }
                        else
                        {
                            Debug.WriteLine($"Development path also not found: {devMainAppPath}");
                        }
                    }
                }
                catch (Exception ex)
                {
                    Debug.WriteLine($"Error during development path discovery: {ex.Message}");
                }
            }

            if (File.Exists(mainAppPath))
            {
                try
                {
                    ProcessStartInfo startInfo = new ProcessStartInfo(mainAppPath)
                    {
                        UseShellExecute = true
                    };
                    Process.Start(startInfo);

                    Application.Current.Shutdown();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Failed to start SkinHunterWPF:\n{ex.Message}", "Launch Error", MessageBoxButton.OK, MessageBoxImage.Error);
                }
            }
            else
            {
                MessageBox.Show($"SkinHunterWPF.exe not found.\nSearched at: {mainAppPath}\n(And common development paths)\n\nPlease ensure SkinHunterWPF.exe is in the same directory as the launcher or that build output paths are correctly configured for development.",
                                "Application Not Found", MessageBoxButton.OK, MessageBoxImage.Error);
            }
        }

        public override async Task InitializeAsync(object? parameter = null)
        {
            await Task.Delay(100); // Simulación muy corta, solo para asegurar que se completa
        }
    }
}
/// ViewModels End of MainLauncherViewModel.cs ///

/// ViewModels Start of SignInViewModel.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection;


namespace SkinHunterLauncher.ViewModels
{
    public partial class SignInViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;

        // ELIMINADO LicenseKey
        // [ObservableProperty]
        // private string? _licenseKey;

        [ObservableProperty]
        private bool _rememberMe;

        public SignInViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Sign In";
        }

        [RelayCommand]
        private async Task SignInWithDiscord() // NUEVO COMANDO
        {
            // IsLoading = true; // El indicador global de LauncherMainViewModel debería cubrir esto

            // Placeholder para la lógica de OAuth2 de Discord
            Debug.WriteLine("Attempting to sign in with Discord...");

            // Simular el proceso de autenticación
            await Task.Delay(1500);

            bool isAuthenticated = true; // Simular éxito por ahora

            if (isAuthenticated)
            {
                // Si 'Remember me' está marcado, guardarías los tokens de forma segura
                if (RememberMe)
                {
                    Debug.WriteLine("Remember me is checked. (Placeholder for saving tokens)");
                }
                await _mainViewModel.NavigateTo<LoadingViewModel>();
            }
            else
            {
                // Mostrar algún mensaje de error si la autenticación falla
                Debug.WriteLine("Discord authentication failed. (Placeholder)");
                // IsLoading = false; // Asegurarse de que el indicador de carga se desactive
            }
        }

        // ELIMINADOS Comandos Submit y DontHaveKey
    }
}
/// ViewModels End of SignInViewModel.cs ///

/// ViewModels Start of WelcomeViewModel.cs ///
﻿using CommunityToolkit.Mvvm.Input;
using System.Threading.Tasks;
using System.Diagnostics;
using System;
using Microsoft.Extensions.DependencyInjection; // Necesario para GetService

namespace SkinHunterLauncher.ViewModels
{
    public partial class WelcomeViewModel : LauncherBaseViewModel
    {
        private readonly LauncherMainViewModel _mainViewModel;

        public WelcomeViewModel(IServiceProvider serviceProvider)
        {
            _mainViewModel = serviceProvider.GetRequiredService<LauncherMainViewModel>();
            Title = "Skin-Hunter - Welcome"; // REBRANDED
        }

        [RelayCommand]
        private async Task SignIn()
        {
            await _mainViewModel.NavigateTo<SignInViewModel>();
        }

        [RelayCommand]
        private void Buy()
        {
            try
            {
                Process.Start(new ProcessStartInfo("https://skinhunterv2.vercel.app") { UseShellExecute = true });
            }
            catch (System.Exception ex)
            {
                Debug.WriteLine($"Error opening BUY link: {ex.Message}");
            }
        }
    }
}
/// ViewModels End of WelcomeViewModel.cs ///

/// Resources Start of LauncherSpecificStyles.xaml ///
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converters="clr-namespace:SkinHunterLauncher.Converters">

    <Color x:Key="LauncherBackgroundColorValue">#10101A</Color>
    <Color x:Key="LauncherForegroundColorValue">#EAEAF5</Color>
    <Color x:Key="LauncherAccentColorValue">#6C63FF</Color>
    <Color x:Key="LauncherSubtleTextColorValue">#A0A0B0</Color>
    <Color x:Key="LauncherButtonBackgroundColorValue">#2A2A3A</Color>
    <Color x:Key="LauncherButtonHoverColorValue">#3A3A4A</Color>
    <Color x:Key="LauncherTextBoxBackgroundColorValue">#181824</Color>
    <Color x:Key="LauncherBorderColorValue">#303040</Color>
    <Color x:Key="LauncherDiscordBlueColorValue">#5865F2</Color>

    <SolidColorBrush x:Key="LauncherBackgroundBrush" Color="{StaticResource LauncherBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherForegroundBrush" Color="{StaticResource LauncherForegroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherAccentBrush" Color="{StaticResource LauncherAccentColorValue}"/>
    <SolidColorBrush x:Key="LauncherSubtleTextBrush" Color="{StaticResource LauncherSubtleTextColorValue}"/>
    <SolidColorBrush x:Key="LauncherButtonBackgroundBrush" Color="{StaticResource LauncherButtonBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherButtonHoverBrush" Color="{StaticResource LauncherButtonHoverColorValue}"/>
    <SolidColorBrush x:Key="LauncherTextBoxBackgroundBrush" Color="{StaticResource LauncherTextBoxBackgroundColorValue}"/>
    <SolidColorBrush x:Key="LauncherBorderBrush" Color="{StaticResource LauncherBorderColorValue}"/>
    <SolidColorBrush x:Key="LauncherDiscordBlueBrush" Color="{StaticResource LauncherDiscordBlueColorValue}"/>

    <converters:ColorBrightnessConverter x:Key="ColorBrightnessConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <Style x:Key="LauncherWindowStyle" TargetType="Window">
        <Setter Property="Background" Value="{StaticResource LauncherBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="UseLayoutRounding" Value="True"/>
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
        <Setter Property="TextOptions.TextRenderingMode" Value="ClearType"/>
        <Setter Property="Icon" Value="pack://application:,,,/Assets/icon.ico"/>
    </Style>

    <Style x:Key="LauncherTitleBarButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Width" Value="40"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="border" Background="{TemplateBinding Background}" SnapsToDevicePixels="true" CornerRadius="0">
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="Center" VerticalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource LauncherButtonHoverBrush}"/>
                            <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{StaticResource LauncherAccentBrush}"/>
                            <Setter Property="Foreground" Value="White"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherCloseButtonStyle" TargetType="Button" BasedOn="{StaticResource LauncherTitleBarButtonStyle}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#E81123"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="#F1707A"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="LauncherDiscordButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource LauncherDiscordBlueBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="15,10"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="48"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="PART_Border" Background="{TemplateBinding Background}" CornerRadius="4">
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                            <Path Width="20" Height="20" Fill="White" Margin="0,0,10,0" Stretch="Uniform"
                                  Data="M20.86,3.76C19.28,3.05 17.6,2.5 15.84,2.09C15.79,2.07 15.73,2.09 15.7,2.13C15.24,2.93 14.75,3.72 14.24,4.5C12.68,4.11 11.12,4.11 9.56,4.5C9.05,3.72 8.56,2.93 8.1,2.13C8.07,2.09 8.01,2.07 7.96,2.09C6.2,2.5 4.52,3.05 2.94,3.76C2.91,3.77 2.89,3.81 2.9,3.85C1.63,6.78 1.08,9.81 1.17,12.85C1.17,12.92 1.22,12.98 1.28,12.98C2.73,14.18 4.22,15.08 5.75,15.72C5.81,15.75 5.88,15.72 5.9,15.66C5.56,14.84 5.28,13.98 5.06,13.1C5.04,13.03 5.1,12.96 5.17,12.96C5.23,12.97 5.28,13 5.34,13.04C7.52,14.26 9.97,14.81 12.4,14.81C14.83,14.81 17.28,14.26 19.46,13.04C19.52,13 19.57,12.97 19.63,12.96C19.7,12.96 19.76,13.03 19.74,13.1C19.52,13.98 19.24,14.84 18.9,15.66C18.88,15.72 18.99,15.75 19.05,15.72C20.58,15.08 22.07,14.18 23.52,12.98C23.58,12.98 23.63,12.92 23.63,12.85C23.83,9.31 22.74,6.04 20.9,3.85C20.91,3.81 20.89,3.77 20.86,3.76Z"/>
                            <ContentPresenter />
                        </StackPanel>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" 
                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.85}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" 
                                     Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.70}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Border" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherPrimaryButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="30,12"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="MinWidth" Value="120"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="PART_Border" Background="{TemplateBinding Background}" CornerRadius="4">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.85}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="PART_Border" Property="Background" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.70}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Border" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherSecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource LauncherPrimaryButtonStyle}">
        <Setter Property="Background" Value="{StaticResource LauncherButtonBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
    </Style>

    <Style x:Key="LauncherLinkButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5,2"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock x:Name="PART_Text" Text="{TemplateBinding Content}" TextDecorations="None">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground}"/>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Text" Property="TextDecorations" Value="Underline"/>
                            <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Foreground, Converter={StaticResource ColorBrightnessConverter}, ConverterParameter=0.8}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>


    <Style x:Key="LauncherTextBoxStyle" TargetType="TextBox">
        <Setter Property="Background" Value="{StaticResource LauncherTextBoxBackgroundBrush}"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherForegroundBrush}"/>
        <Setter Property="BorderBrush" Value="{StaticResource LauncherBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Padding" Value="10,8"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="MinHeight" Value="40"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="CaretBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="SelectionBrush" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="4">
                        <ScrollViewer x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                            <Setter TargetName="border" Property="BorderThickness" Value="1.5"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="border" Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal">
                        <Border x:Name="checkBoxBorder" Width="18" Height="18" CornerRadius="3"
                                Background="{StaticResource LauncherTextBoxBackgroundBrush}"
                                BorderBrush="{StaticResource LauncherBorderBrush}"
                                BorderThickness="1">
                            <Path x:Name="checkMark" Width="10" Height="10" Stretch="Uniform"
                                  Fill="{StaticResource LauncherAccentBrush}"
                                  Data="M4.5,10.5 L1.5,7.5 L2.5,6.5 L4.5,8.5 L9.5,3.5 L10.5,4.5 Z"
                                  Visibility="Collapsed" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                        <ContentPresenter Margin="8,0,0,0" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="checkMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{StaticResource LauncherAccentBrush}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Opacity" Value="0.6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LauncherLoadingSpinnerStyle" TargetType="ProgressBar" >
        <Setter Property="IsIndeterminate" Value="True"/>
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ProgressBar" >
                    <Grid RenderTransformOrigin="0.5,0.5">
                        <Ellipse Stroke="{StaticResource LauncherBorderBrush}" StrokeThickness="3" Opacity="0.4"/>
                        <Path Name="PART_Indicator" Stroke="{TemplateBinding Foreground}" StrokeThickness="3" StrokeStartLineCap="Round" StrokeEndLineCap="Round"
                                Data="M25,3 A22,22 0 0 1 47,25">
                            <Path.RenderTransform>
                                <RotateTransform Angle="0" CenterX="25" CenterY="25" />
                            </Path.RenderTransform>
                        </Path>
                        <Grid.Triggers>
                            <EventTrigger RoutedEvent="Loaded">
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="PART_Indicator" 
                                                         Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" 
                                                         From="0" To="360" Duration="0:0:0.8" RepeatBehavior="Forever"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </EventTrigger>
                        </Grid.Triggers>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="UpdateLogSectionStyle" TargetType="Border">
        <Setter Property="Background" Value="{StaticResource LauncherButtonBackgroundBrush}"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="Margin" Value="0,0,0,15"/>
        <Setter Property="CornerRadius" Value="4"/>
    </Style>

    <Style x:Key="UpdateLogTitleStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource LauncherAccentBrush}"/>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="Margin" Value="0,0,0,8"/>
    </Style>

    <Style x:Key="UpdateLogItemStyle" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{StaticResource LauncherSubtleTextBrush}"/>
        <Setter Property="FontSize" Value="13"/>
        <Setter Property="Margin" Value="10,0,0,4"/>
    </Style>
</ResourceDictionary>
/// Resources End of LauncherSpecificStyles.xaml ///

/// Models Start of UpdateLogEntry.cs ///
﻿using CommunityToolkit.Mvvm.ComponentModel; // Necesitas este using si ObservableObject viene de aquí
using System.Collections.Generic;


namespace SkinHunterLauncher.Models
{
    public class UpdateLogEntry : ObservableObject // Asegúrate que ObservableObject está disponible
    {
        private string _title = string.Empty;
        public string Title
        {
            get => _title;
            set => SetProperty(ref _title, value);
        }

        private List<string> _changes = [];
        public List<string> Changes
        {
            get => _changes;
            set => SetProperty(ref _changes, value);
        }
    }
}
/// Models End of UpdateLogEntry.cs ///

/// Converters Start of BooleanToVisibilityConverter.cs ///
﻿// SkinHunterLauncher/Converters/BooleanToVisibilityConverter.cs
using System;
using System.Globalization;
using System.Windows;
using System.Windows.Data;

namespace SkinHunterLauncher.Converters // Asegúrate que este namespace es correcto
{
    [ValueConversion(typeof(bool), typeof(Visibility))]
    public class BooleanToVisibilityConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool flag = false;
            if (value is bool bValue)
            {
                flag = bValue;
            }

            // Considera si el parámetro "Inverse" es necesario aquí,
            // si no, puedes simplificar esta lógica.
            // Si no pasas "Inverse" como ConverterParameter, esta parte no se usa.
            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }


            if (inverse)
            {
                return !flag ? Visibility.Visible : Visibility.Collapsed;
            }
            return flag ? Visibility.Visible : Visibility.Collapsed;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            bool inverse = false;
            if (parameter is string paramString)
            {
                bool.TryParse(paramString, out inverse);
            }

            bool flag = (value is Visibility v) && v == Visibility.Visible;

            if (inverse)
            {
                return !flag;
            }
            return flag;
        }
    }
}
/// Converters End of BooleanToVisibilityConverter.cs ///

/// Converters Start of ColorBrightnessConverter.cs ///
﻿using System;
using System.Globalization;
using System.Windows.Data;
using System.Windows.Media;

namespace SkinHunterLauncher.Converters
{
    public class ColorBrightnessConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is SolidColorBrush originalBrush)
            {
                Color originalColor = originalBrush.Color;
                float factor = 1.0f;
                if (parameter != null && float.TryParse(parameter.ToString(), NumberStyles.Any, CultureInfo.InvariantCulture, out float parsedFactor))
                {
                    factor = parsedFactor;
                }

                byte r = (byte)Math.Max(0, Math.Min(255, originalColor.R * factor));
                byte g = (byte)Math.Max(0, Math.Min(255, originalColor.G * factor));
                byte b = (byte)Math.Max(0, Math.Min(255, originalColor.B * factor));

                return new SolidColorBrush(Color.FromArgb(originalColor.A, r, g, b));
            }
            return value;
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            throw new NotImplementedException();
        }
    }
}
/// Converters End of ColorBrightnessConverter.cs ///

